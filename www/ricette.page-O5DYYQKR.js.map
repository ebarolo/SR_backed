{
  "version": 3,
  "sources": ["src/app/pages/ricette/ricette.page.ts", "src/app/pages/ricette/ricette.page.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonChip,IonLabel,IonListHeader,IonSearchbar, IonButton, IonGrid, IonRow, IonCol, IonItem, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/angular/standalone';\nimport { IonList } from '@ionic/angular/standalone';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Router, NavigationExtras } from '@angular/router';\n\n\n@Component({\n  selector: 'app-ricette',\n  templateUrl: './ricette.page.html',\n  styleUrls: ['./ricette.page.scss'],\n  standalone: true,\n  imports: [ IonButton, IonGrid, IonRow, IonCol,IonItem, IonList, IonChip,IonLabel, IonListHeader, IonSearchbar,IonContent, IonHeader, IonTitle, IonToolbar, CommonModule, FormsModule]\n})\n\nexport class RicettePage implements OnInit {\n\nprivate responseJson:any = [];\npublic recipeFinded:any = [] ;\npublic categorie:any = []\n\nconstructor(private http: HttpClient, private router: Router) { }\n\n  ngOnInit() {\n\n  }\n\n  ionViewWillEnter(){\n    this.getRecipeList()\n  }\n\n  async getRecipeList() {\n  \n    this.http.get('/getRecipeList')\n      .subscribe({\n        next: async (response:any) => {\n          console.log('Risposta dal server:', response);\n          this.responseJson = response;\n          this.categorie = await this.getCategorie();\n          this.recipeFinded = this.responseJson;\n        },\n        error: async (error) => {\n          console.error('Errore durante l\\'invio:', error);\n          //this.resultMessage = error.error.message;\n        }\n      });\n  }\n\n  searchRecipe(toFind:any){\n    const query = toFind.target.value.toLowerCase();\n    console.log(\"categoria da cercare \", query)\n    this.recipeFinded = this.responseJson.filter((recipe: { titolo: string }) => \n      recipe.titolo.toLowerCase().includes(query)\n    );\n    console.log(this.recipeFinded)\n\n  }\n  \n  async getCategorie(){\n    var categorie = [...new Set(this.responseJson.map((item: { categoria: string }) => item.categoria))];\n    console.log('Categorie uniche:',  this.categorie);\n    categorie.unshift(\"tutti\");\n    return  categorie;\n  }\n\n  searchByCat(cat:string){\n    const query = cat.toLowerCase();\n    console.log(\"categoria da cercare \", query)\n\n    if(query == \"tutti\"){\n      this.recipeFinded = this.responseJson\n    } else {\n     this.recipeFinded = this.responseJson.filter((recipe: { categoria: string }) => \n      recipe.categoria.toLowerCase().includes(query)\n     );\n    }\n    console.log(this.recipeFinded)\n  }\n\n  goToRecipe(recipe:any){\n    console.log(\"ricetta da caricare \", recipe)\n    const navigationExtras: NavigationExtras = {\n      state: {\n        data: recipe\n      }\n    };\n\n    this.router.navigate(['/tabs/ricetta'], navigationExtras);\n\n  }\n}\n", "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>ricette</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n\n<ion-grid>\n  <ion-row>\n    <ion-col></ion-col>\n    <ion-col size=\"10\">\n      <ion-searchbar [debounce]=\"1000\" (ionInput)=\"searchRecipe($event)\" placeholder=\"cerca ricetta\"></ion-searchbar>\n\n      <ion-chip *ngFor=\"let categoria of categorie\" (click)=\"searchByCat(categoria)\">{{categoria}}</ion-chip>\n    \n    <ion-list>\n      <ion-item *ngFor=\"let recipe of recipeFinded\" (click)=\"goToRecipe(recipe)\" [button]=\"true\">\n        <ion-label>{{ recipe.titolo }}</ion-label>\n      </ion-item>\n    </ion-list>\n    </ion-col>\n    <ion-col></ion-col>\n  </ion-row>\n</ion-grid>\n  \n</ion-content>\n"],
  "mappings": "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",
  "names": []
}
